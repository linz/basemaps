import { Vpc } from '@aws-cdk/aws-ec2';
import * as iam from '@aws-cdk/aws-iam';
import * as firehose from '@aws-cdk/aws-kinesisfirehose';
import * as s3 from '@aws-cdk/aws-s3';
import { StringParameter } from '@aws-cdk/aws-ssm';
import * as cdk from '@aws-cdk/core';
import { Env } from '@basemaps/shared';
import { LambdaLogShipperFunction, LogObject } from '@linzjs/cdk-elastic-shipper';
import { DeployEnv } from '../deploy.env';

const ConfigName = `/es-shipper-config/accounts`;

export function onLog(lo: LogObject): boolean | void {
    if (lo['@tags']?.includes('Lambda log')) return true;
}

/**
 * Basemap's logging
 *
 * Store all logs generated by basemaps into a s3 bucket for long term storage
 * One logs are added to the bucket configure a lambda to ship them elastic search
 * for monitoring and alerting
 *
 * General log flow:
 *
 * Lambda -> CloudWatch -> Kinesis -> Kinesis Firehose -> S3 -> Lambda -> ElasticSearch
 */
export class LoggingStack extends cdk.Stack {
    fireHose: firehose.CfnDeliveryStream;
    public shipper: LambdaLogShipperFunction;

    public constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
        super(scope, id, props);

        const logBucket = new s3.Bucket(this, 'LogBucket', {
            versioned: true,
            blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
        });

        const accountId = Env.get(DeployEnv.LogAccountId);
        if (accountId != null && accountId !== '') {
            logBucket.grantReadWrite(new iam.AccountPrincipal(accountId));
        }

        new cdk.CfnOutput(this, 'LogBucketArn', { value: logBucket.bucketArn });

        const vpc = Vpc.fromLookup(this, 'ShipperVpc', { tags: { default: 'true' } });

        const configParameter = StringParameter.fromStringParameterName(this, 'ShipperConfig', ConfigName);
        this.shipper = new LambdaLogShipperFunction(this, 'ShipperFunction', { configParameter, vpc, onLog });
        this.shipper.addS3Source(logBucket);
    }
}
