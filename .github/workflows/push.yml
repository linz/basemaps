name: Build

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - uses: linz/action-typescript@v1

      - name: Check Dependencies
        run: node scripts/detect.unlinked.dep.js

      - name: Benchmark
        if: matrix.os == 'ubuntu-latest'
        uses: blacha/hyperfine-action@v1

  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    needs: [build]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: linz/action-typescript@v1
      # pulls all tags (needed for lerna to correctly version)
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/* # see https://stackoverflow.com/a/60184319/9285308

      - name: Check Dependencies
        run: node scripts/detect.unlinked.dep.js

      - name: (Prod) Setup git config
        if: github.ref == 'refs/heads/master' && startsWith(github.event.head_commit.message, 'release:')
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: (Prod) Create tag
        if: github.ref == 'refs/heads/master' && startsWith(github.event.head_commit.message, 'release:')
        run: |
          CURRENT_VERSION=$(node -p "require('./lerna.json').version")
          git tag v${CURRENT_VERSION} -m v${CURRENT_VERSION}
          git push --tags

      - name: Create github release
        if: github.ref == 'refs/heads/master' && startsWith(github.event.head_commit.message, 'release:')
        run: npx conventional-github-releaser -p angular
        env:
          CONVENTIONAL_GITHUB_RELEASER_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Deploy - Bundle
        if: github.ref != 'refs/heads/master' || github.repository != 'linz/basemaps'
        run: npx lerna run bundle --stream

      - name: (NonProd) Configure AWS Credentials
        if: github.ref == 'refs/heads/master' && github.repository == 'linz/basemaps'
        uses: aws-actions/configure-aws-credentials@v1.6.0
        with:
          aws-region: ap-southeast-2
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_ROLE_NON_PROD }}

      - name: (NonProd) Deploy
        if: github.ref == 'refs/heads/master' && github.repository == 'linz/basemaps'
        run: |
          npx lerna run bundle --stream
          npx lerna run deploy:deploy --stream
        env:
          SPLIT_IO_KEY: ${{secrets.SPLIT_IO_KEY_NON_PROD}}
          GOOGLE_ANALYTICS: ${{secrets.GOOGLE_ANALYTICS_NON_PROD}}
          NODE_ENV: "dev"
          API_KEY: ${{secrets.API_KEY_NON_PROD}}

      - name: (Prod) Publish NPM
        if: github.ref == 'refs/heads/master' && startsWith(github.event.head_commit.message, 'release:')
        run: npx lerna publish from-git --yes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{secrets.NPM_AUTH_TOKEN_LINZJS}}

      - name: (Prod) Configure AWS Credentials
        if: github.ref == 'refs/heads/master' && startsWith(github.event.head_commit.message, 'release:')
        uses: aws-actions/configure-aws-credentials@v1.6.0
        with:
          aws-region: ap-southeast-2
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_ROLE_PROD }}

      - name: (Prod) Deploy
        if: github.ref == 'refs/heads/master' && startsWith(github.event.head_commit.message, 'release:')
        run: |
          npx lerna run bundle --stream
          npx lerna run deploy:deploy --stream
        env:
          NODE_ENV: "production"
          GOOGLE_ANALYTICS: ${{secrets.GOOGLE_ANALYTICS_PROD}}
          SPLIT_IO_KEY: ${{secrets.SPLIT_IO_KEY_PROD}}
          API_KEY: ${{secrets.API_KEY_PROD}}

  benchmark:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: linz/action-typescript@v1

      - name: Benchmark
        uses: blacha/hyperfine-action@v1
